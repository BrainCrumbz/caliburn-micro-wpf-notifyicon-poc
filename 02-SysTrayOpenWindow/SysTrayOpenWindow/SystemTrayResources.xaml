<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cal="http://www.caliburnproject.org"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:local="clr-namespace:SysTrayOpenWindow">

    <!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
    <!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
    -->
    <ContextMenu x:Shared="false" x:Key="MainSysTrayMenu">
        <MenuItem Header="Show Window" cal:Message.Attach="ShowWindow" />
        <MenuItem Header="Hide Window" cal:Message.Attach="HideWindow" />
        <Separator />
        <MenuItem Header="Exit" cal:Message.Attach="ExitApplication" />
    </ContextMenu>

    <!-- the application main system tray icon -->
    <!-- NOTE: 
    We didn't really understand why, but binding on double-click event with Caliburn.Micro convention does not work.
    Not even when following what is suggested here: 
    http://stackoverflow.com/questions/19447515/double-click-wpfnotifyicon-with-caliburn-micro
    -->
    <tb:TaskbarIcon x:Key="MainSystemTrayIcon"
                    IconSource="Orange.ico"
                    ToolTipText="Double-click for window, right-click for menu"
                    cal:Message.Attach="[Event TrayMouseDoubleClick] = [Action ShowWindow]"
                    ContextMenu="{StaticResource MainSysTrayMenu}">

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <local:MainSystemTrayIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>

</ResourceDictionary>